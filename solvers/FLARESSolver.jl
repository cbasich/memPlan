using Base
include("VIMDPSolver.jl")

mutable struct FLARESSolver
    max_trials::Integer
    horizon::Integer
    optimal::Bool
    use_probs_for_depth::Bool
    dead_end_cost::Float64
    œµ::Float64
    œÄ::Dict{Integer,Integer}
    V::Vector{Float64}
    H::Vector{Float64}
    solved::Set{Integer}
    dsolved::Set{Integer}
    Qs::Vector{Float64}#todo: I have no idea what this is supposed to be used for, but it's needed for update, etc cribbed from LAO*
end

function trial(‚Ñ±, ùí±, M, s::Integer)
    current_state = s
    visited = []
    accumulated_cost = 0.0

    while !(labeled_solved(‚Ñ±, current_state))
        if terminal(M.S[current_state])
            break
        end
        push!(visited, current_state)
        bellman_update(‚Ñ±, ùí±, M, current_state)

        if (accumulated_cost <= ‚Ñ±.dead_end_cost)
            break
        end

        greedy_action = get_greedy_action(‚Ñ±, ùí±, M, current_state)
        accumulated_cost += M.R(M, current_state, greedy_action)
        current_state::Integer = generate_successor(M, current_state, greedy_action)
    end
    while (!isempty(visited))
        current_state = pop!(visited)
        solved = check_solved(‚Ñ±, ùí±, M, current_state)
        if (!solved)
            break
        end
    end
end

function labeled_solved(‚Ñ±, s)
    return s ‚àà ‚Ñ±.solved || s ‚àà ‚Ñ±.dsolved
end

function residual(‚Ñ±, ùí±, M, s)
    if !haskey(‚Ñ±.œÄ, s)
        return 0.0
    end
    a = ‚Ñ±.œÄ[s]
    res = lookahead(‚Ñ±, ùí±, M, s, a) - ‚Ñ±.V[s]
    return abs(res)
end

function get_greedy_action(‚Ñ±, ùí±, M, s::Integer)
    if haskey(‚Ñ±.œÄ, s)
        return ‚Ñ±.œÄ[s]
    else
        besta = -1
        bestq = ‚Ñ±.dead_end_cost #needs to be negative!!!
        for a ‚àà length(M.A)
            tmp = lookahead(‚Ñ±, ùí±, M, s, a)
            if tmp > bestq
                bestq = tmp
                besta = a
            end
        end
        return besta
    end
end

function check_solved(‚Ñ±, ùí±, M, s::Integer)
    open = []
    closed = []
    closed_states = []

    current_state = s
    if !labeled_solved(‚Ñ±, s)
        push!(open, s => 0.0)
    else
        return true
    end

    rv = true
    subgraph_within_search_horizon = ‚Ñ±.optimal && true
    while !(isempty(open))
        pp = pop!(open)
        current_state = pp.first
        depth = pp.second

        if (‚Ñ±.use_probs_for_depth && (depth < 2 * log(‚Ñ±.horizon)) || (!‚Ñ±.use_probs_for_depth && depth > 2 * ‚Ñ±.horizon))
            subgraph_within_search_horizon = false
            continue
        end

        if (terminal(M.S[current_state]))
            continue
        end

        push!(closed, pp)
        push!(closed_states, pp.first)
        a = get_greedy_action(‚Ñ±, ùí±, M, current_state)
        if (residual(‚Ñ±, ùí±, M, current_state) > ‚Ñ±.œµ)
            rv = false
        end
        successor_probs = M.T[s][a]
        for (sp, prob) in successor_probs
            if !labeled_solved(‚Ñ±, sp) && sp ‚àâ closed_states
                new_depth = compute_new_depth(‚Ñ±, prob, depth)
                push!(open, sp => new_depth)
            elseif sp ‚àà ‚Ñ±.dsolved && sp ‚àâ ‚Ñ±.solved
                subgraph_within_search_horizon = false
            end
        end
    end

    if rv
        while !isempty(closed)
            pp = pop!(closed)
            _ = pop!(closed_states)
            if subgraph_within_search_horizon
                push!(‚Ñ±.solved, pp.first)
                push!(‚Ñ±.dsolved, pp.first)
            else
                if (‚Ñ±.use_probs_for_depth && pp.second > log(‚Ñ±.horizon)) || (!‚Ñ±.use_probs_for_depth && pp.second <= ‚Ñ±.horizon)

                    push!(‚Ñ±.dsolved, pp.first)
                end
            end
        end
    else
        while !isempty(closed)
            pp = pop!(closed)
            _ = pop!(closed_states)
            bellman_update(‚Ñ±, ùí±, M, pp.first)
        end
    end
    return rv
end

function compute_new_depth(‚Ñ±, prob, depth)
    if ‚Ñ±.use_probs_for_depth
        return depth + log(prob)
    else
        return depth + 1
    end
end

function lookahead(‚Ñ±::FLARESSolver,
                   ùí±::ValueIterationSolver,
                   M,
                   s::Integer,
                   a::Integer)
    S, A, T, R, H, V = M.S, M.A, M.T[s][a], M.R, M.H, ‚Ñ±.V

    q = 0.
    for (s‚Ä≤, p) in T
       if haskey(‚Ñ±.œÄ, s‚Ä≤)
           q += p * V[s‚Ä≤]
       else
           q += p * H(M, ùí±.V, s, a)
       end
    end
    return q + R(M,s,a)
end

function backup(‚Ñ±::FLARESSolver,
                ùí±::ValueIterationSolver,
                M,
                s::Integer)
    for a = 1:length(M.A)
        ‚Ñ±.Qs[a] = lookahead(‚Ñ±, ùí±, M, s, a)
    end
    a = Base.argmax(‚Ñ±.Qs)
    return a, ‚Ñ±.Qs[a]
end

function bellman_update(‚Ñ±::FLARESSolver,
                        ùí±::ValueIterationSolver,
                        M,
                        s::Integer)
    a, q = backup(‚Ñ±, ùí±,  M, s)
    residual = abs(‚Ñ±.V[s] - q)
    ‚Ñ±.V[s] = q
    ‚Ñ±.œÄ[s] = a
    return residual
end

function solve(‚Ñ±::FLARESSolver,
               ùí±::ValueIterationSolver,
               M,
               s::Integer)

    trials = 0
    while (!labeled_solved(‚Ñ±,s) && trials < ‚Ñ±.max_trials)
        # println("trial: ", trials)
        trial(‚Ñ±, ùí±, M, s)
        trials += 1
    end
    for (s, state) ‚àà enumerate(M.S)
        ‚Ñ±.œÄ[s] = get_greedy_action(‚Ñ±, ùí±, M, s)
    end
    return ‚Ñ±.œÄ[s], length(‚Ñ±.dsolved)
end
