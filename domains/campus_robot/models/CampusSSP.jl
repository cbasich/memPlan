include(joinpath(@__DIR__, "..", "solvers", "ValueIterationSolver.jl"))

struct CampusState
    x::Integer
    y::Integer
    Œ∏::Char
    o::Char
end

struct CampusAction
    value::Union{String,Char}
end

struct CampusSSP
    S::Vector{CampusState}
    A::Vector{CampusAction}
    T
    C
    s‚ÇÄ
    G
end

function generate_grid(filename::String)
    grid = Vector{Vector{Char}}()
    open(filename) do file
        for l in eachline(file)
            row = collect(l)
            deleteat!(row, row .== ' ')
            push!(grid, row)
        end
    end
    return grid
end

function generate_states(grid::Vector{Vector{Char}},
                         init::Char,
                         goals::Vector{Char})
    S = Vector{CampusState}()
    G = Vector{CampusState}()
    s‚ÇÄ = CampusState(-1, -1, '‚Üë', '‚àÖ')
    for (i, row) in enumerate(grid)
        for (j, loc) in enumerate(row)
            for Œ∏ in ['‚Üë', '‚Üì', '‚Üí', '‚Üê']
                if loc == 'X'
                    continue
                elseif loc == '.'
                    state = CampusState(i, j, Œ∏, '‚àÖ')
                    push!(S, state)
                elseif loc == 'C'
                    for o in ['E', 'L', 'B']
                        state = CampusState(i, j, Œ∏, o)
                        push!(S, state)
                    end
                elseif loc == 'D'
                    for o in ['C', 'O']
                        state = CampusState(i, j, Œ∏, o)
                        push!(S, state)
                    end
                else
                    state = CampusState(i, j, Œ∏, '‚àÖ')
                    push!(S, state)
                    if loc in goals
                        push!(G, state)
                    elseif loc == init
                        s‚ÇÄ = state
                    end
                end
            end
        end
    end
    dead_end = CampusState(-1, -1, '‚àÖ', '‚àÖ')
    push!(S, dead_end)
    return S, s‚ÇÄ, G
end

function generate_actions()
    A = Vector{CampusAction}()
    for v in ['‚Üë', '‚Üí', '‚Üì', '‚Üê', "cross", "open", "wait"]
        a = CampusAction(v)
        push!(A, a)
    end
    return A
end

function pos_shift(dir::Char)
    xp, yp = 0, 0
    if dir == '‚Üë'
        xp -= 1
    elseif dir == '‚Üí'
        yp += 1
    elseif dir == '‚Üì'
        xp += 1
    else
        yp -= 1
    end
    return xp, yp
end

function slip_right(dir::Char)
    if dir == '‚Üë'
        return '‚Üí'
    elseif dir == '‚Üí'
        return '‚Üì'
    elseif dir == '‚Üì'
        return '‚Üê'
    else
        return '‚Üë'
    end
end

function slip_left(dir::Char)
    if dir == '‚Üë'
        return '‚Üê'
    elseif dir == '‚Üí'
        return '‚Üë'
    elseif dir == '‚Üì'
        return '‚Üí'
    else
        return '‚Üì'
    end
end

function move_probability(s::CampusState,
                          a::CampusAction,
                         s‚Ä≤::CampusState)
    xp, yp = pos_shift(a.value)
    xpr, ypr = pos_shift(slip_right(a.value))
    xpl, ypl = pos_shift(slip_left(a.value))
    xp, xpr, xpl = xp + s.x, xpr + s.x, xpl + s.x
    yp, ypr, ypl = yp + s.y, ypr + s.y, ypl + s.y

    if s‚Ä≤.Œ∏ ‚â† a.value
        return 0.
    end

    p = 0.
    if s.o == 'C' || s.o == 'E' || s.o == 'L' || s.o == 'B'
        if a.value == s.Œ∏
            p = (s‚Ä≤ == s ? 1. : 0.)
        else
            if s‚Ä≤.x == xp && s‚Ä≤.y == yp
                p = .9
            elseif s‚Ä≤.x == s.x && s‚Ä≤.y == s.y
                p = .1
            end
        end
    elseif s.o == 'O'
        if s‚Ä≤.x == xp && s‚Ä≤.y == yp
            p = .9
        elseif s‚Ä≤.x == s.x && s‚Ä≤.y == s.y
            p = .1
        end
        p = ((xp == s‚Ä≤.x && yp == s‚Ä≤.y) ? 1. : 0.)
    else
        if s‚Ä≤.o == 'O'
            p = 0.0
        elseif s‚Ä≤.o == 'C'
            p = ((xp == s‚Ä≤.x && yp == s‚Ä≤.y) ? 1. : 0.)
        elseif s‚Ä≤.o == '‚àÖ'
            if s‚Ä≤.x == xp && s‚Ä≤.y == yp
                p = .8
            # elseif s‚Ä≤.x == xpr && s‚Ä≤.y == ypr
            #     p = .05
            # elseif s‚Ä≤.x == xpl && s‚Ä≤.y == ypl
            #     p = .05
            elseif s‚Ä≤.x == s.x && s‚Ä≤.y == s.y
                p = .2
            end
        else
            p = ((xp == s‚Ä≤.x && yp == s‚Ä≤.y) ? 1/3 : 0.)
        end
    end
    return p
end

function wait_probability(s::CampusState,
                         s‚Ä≤::CampusState)
    if s‚Ä≤.x ‚â† s.x || s‚Ä≤.y ‚â† s.y || s‚Ä≤.Œ∏ ‚â† s.Œ∏
        return 0.
    end
    p = 0.
    if s.o == 'E'
        if s‚Ä≤.o == 'E'
            p = .75
        elseif s‚Ä≤.o == 'L'
            p = .25
        end
    elseif s.o == 'L'
        if s‚Ä≤.o == 'E' || s‚Ä≤.o == 'B'
            p = .25
        elseif s‚Ä≤.o == 'L'
            p = .5
        end
    elseif s.o == 'B'
        if s‚Ä≤.o == 'L'
            p = .25
        elseif s‚Ä≤.o == 'B'
            p = .75
        end
    end
    return p
end

function cross_probability(S::Vector{CampusState},
                           s::CampusState,
                          s‚Ä≤::CampusState)
    if s.o ‚àâ ['E', 'L', 'B']
        return (s == s‚Ä≤ ? 1. : 0.)
    end

    xp, yp = pos_shift(s.Œ∏)
    xp += s.x
    yp += s.y

    cross_state = CampusState(xp, yp, s.Œ∏, '‚àÖ')
    if cross_state ‚àâ S
        return (s == s‚Ä≤ ? 1. : 0.)
    end

    p = 0.
    if s.o == 'E'
        if s‚Ä≤.x == xp && s‚Ä≤.y == yp && s‚Ä≤.Œ∏ == s.Œ∏ && s‚Ä≤.o == '‚àÖ'
            p = 1.
        end
    elseif s.o == 'L'
        if s‚Ä≤.x == xp && s‚Ä≤.y == yp && s‚Ä≤.Œ∏ == s.Œ∏ && s‚Ä≤.o == '‚àÖ'
            p = .5
        else
            p = .5wait_probability(s, s‚Ä≤)
        end
    elseif s.o == 'B'
        if s‚Ä≤.x == xp && s‚Ä≤.y == yp && s‚Ä≤.Œ∏ == s.Œ∏ && s‚Ä≤.o == '‚àÖ'
            p = .1
        elseif s‚Ä≤.x == -1
            p = .1
        else
            p = .8wait_probability(s, s‚Ä≤)
        end
    else
        p = 0.0
    end
    return p
end

function open_probability(s::CampusState,
                         s‚Ä≤::CampusState)
    p = 0.
    if s.o ‚â† 'C'
        p = (s‚Ä≤ == s ? 1. : 0.)
    end
    if s.x == s‚Ä≤.x && s.y == s‚Ä≤.y && s.Œ∏ == s‚Ä≤.Œ∏ && s‚Ä≤.o == 'O'
        p = 1.
    end
    return p
end

function generate_transition_matrix(S::Vector{CampusState},
                                    A::Vector{CampusAction},
                                    G::Vector{CampusState})
    T = [[[0.0 for (i, _) in enumerate(S)]
               for (j, _) in enumerate(A)]
               for (k, _) in enumerate(S)]
    for (s, state) in enumerate(S)
        for (a, action) in enumerate(A)
            if state in G
                T[s][a][s] = 1.0
                continue
            elseif state.x == -1
                T[s][a][index(G[1], S)] = 1.0
            end
            for (s‚Ä≤, state‚Ä≤) in enumerate(S)
                if action.value == "open"
                    T[s][a][s‚Ä≤] = open_probability(state, state‚Ä≤)
                elseif action.value == "wait"
                    T[s][a][s‚Ä≤] = wait_probability(state, state‚Ä≤)
                elseif action.value == "cross"
                    T[s][a][s‚Ä≤] = cross_probability(S, state, state‚Ä≤)
                else
                    T[s][a][s‚Ä≤] = move_probability(state, action, state‚Ä≤)
                end
            end
            if sum(T[s][a]) ‚â† 1.
                T[s][a][s] += (1. - sum(T[s][a]))
            end
        end
    end
    return T
end

function check_transition_validity(T, S, A)
    n, m = length(S), length(A)
    for i in 1:n
        for j in 1:m
            if round(sum(T[i][j])) == 1.
                continue
            else
                println("Transition error at state index $i and action index $j")
                println("with a total probability mass of $(sum(T[i][j])).")
                println("State: $(S[i])")
                println("Action: $(A[j])")
                println(T[i][j][i])
                return 0.
            end
        end
    end
end

function generate_cost_matrix(S::Vector{CampusState},
                              A::Vector{CampusAction},
                              G::Vector{CampusState},
                           grid::Vector{Vector{Char}})
    C = [[1.0 for (i, _) in enumerate(A)]
              for (j, _) in enumerate(S)]

    for (s, state) in enumerate(S)
        if state in G
            C[s] *= 0.0
            continue
        elseif state.x == -1
            C[s] *= 100.0
        end
        for (a, action) in enumerate(A)
            if state.o == 'C' && state.Œ∏ == action.value
                C[s][a] = 5.0
            end
            if typeof(action.value) == Char
                xp, yp = pos_shift(action.value)
                x, y = state.x + xp, state.y + yp
                if x < 1 || x > length(grid) || y < 1 || y > length(grid[1]) || grid[x][y] == 'X'
                    C[s][a] = 5.0
                end
            end
        end
    end
    return C
end

function build_model(filepath::String)
    grid = generate_grid(filepath)
    S, s‚ÇÄ, G = generate_states(grid, 's', ['g'])
    A = generate_actions()
    C = generate_cost_matrix(S, A, G, grid)
    T = generate_transition_matrix(S, A, G)
    check_transition_validity(T, S, A)
    ‚Ñ≥ = CampusSSP(S, A, T, C, s‚ÇÄ, G)
    return ‚Ñ≥
end

function solve_model(‚Ñ≥::CampusSSP)
    ùí± = ValueIterationSolver(.001,
                             true,
          Dict{Integer,Integer}(),
                  zeros(length(‚Ñ≥.S)),
        Vector{Float64}(undef, length(‚Ñ≥.A)))
    solve(ùí±, ‚Ñ≥)
    return ùí±
end

function generate_successor(‚Ñ≥::CampusSSP, s::Int, a::Int)
    thresh = rand()
    p = 0.
    for (s‚Ä≤, state‚Ä≤) ‚àà enumerate(‚Ñ≥.S)
        p += ‚Ñ≥.T[s][a][s‚Ä≤]
        if p >= thresh
            return state‚Ä≤
        end
    end
end

function index(element, collection)
    for i=1:length(collection)
        if collection[i] == element
            return i
        end
    end
    return -1
end

function simulate(‚Ñ≥::CampusSSP, ùí±::ValueIterationSolver)
    S, A, C, G = ‚Ñ≥.S, ‚Ñ≥.A, ‚Ñ≥.C, ‚Ñ≥.G
    cost = 0.
    # println(ùí±.V[index(‚Ñ≥.s‚ÇÄ, S)])
    for i=1:100
        state = ‚Ñ≥.s‚ÇÄ
        # println("Expected cost to goal: $(ùí±.V[index(state, S)])")
        while state ‚àâ G
            s = index(state, S)
            a = ùí±.œÄ[s]
            cost += C[s][a]
            # println("Taking action $(A[a]) in state $state.")
            state = generate_successor(‚Ñ≥, s, a)
        end
        # println("Reached the goal with total cost $cost.")
    end
    println("Average cost to goal: $(cost / 100.0)")
end

# function run_CampusSSP()
#     ‚Ñ≥ = build_model("tiny.txt")
#     ùí± = @time solve_model(‚Ñ≥)
#     simulate(‚Ñ≥, ùí±)
# end

# run_CampusSSP()
